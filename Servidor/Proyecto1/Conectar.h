/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Conectar_H
#define Conectar_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Proyecto1_types.h"

namespace proyecto1 {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ConectarIf {
 public:
  virtual ~ConectarIf() {}
  virtual int32_t Eliminar(const int32_t fila, const int32_t columna) = 0;
  virtual int32_t Pedir_DimesionT() = 0;
  virtual int32_t Agregar_Usuario(const std::string& usuario) = 0;
  virtual int32_t Buscar_Usuario(const std::string& usuario) = 0;
  virtual int32_t Cambio_Nivel(const std::string& usuario) = 0;
  virtual int32_t ON_OFF(const int32_t num) = 0;
  virtual void Puntajes(std::string& _return, const std::string& usuario) = 0;
};

class ConectarIfFactory {
 public:
  typedef ConectarIf Handler;

  virtual ~ConectarIfFactory() {}

  virtual ConectarIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ConectarIf* /* handler */) = 0;
};

class ConectarIfSingletonFactory : virtual public ConectarIfFactory {
 public:
  ConectarIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ConectarIf>& iface) : iface_(iface) {}
  virtual ~ConectarIfSingletonFactory() {}

  virtual ConectarIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ConectarIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ConectarIf> iface_;
};

class ConectarNull : virtual public ConectarIf {
 public:
  virtual ~ConectarNull() {}
  int32_t Eliminar(const int32_t /* fila */, const int32_t /* columna */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Pedir_DimesionT() {
    int32_t _return = 0;
    return _return;
  }
  int32_t Agregar_Usuario(const std::string& /* usuario */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Buscar_Usuario(const std::string& /* usuario */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Cambio_Nivel(const std::string& /* usuario */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ON_OFF(const int32_t /* num */) {
    int32_t _return = 0;
    return _return;
  }
  void Puntajes(std::string& /* _return */, const std::string& /* usuario */) {
    return;
  }
};

typedef struct _Conectar_Eliminar_args__isset {
  _Conectar_Eliminar_args__isset() : fila(false), columna(false) {}
  bool fila :1;
  bool columna :1;
} _Conectar_Eliminar_args__isset;

class Conectar_Eliminar_args {
 public:

  Conectar_Eliminar_args(const Conectar_Eliminar_args&);
  Conectar_Eliminar_args& operator=(const Conectar_Eliminar_args&);
  Conectar_Eliminar_args() : fila(0), columna(0) {
  }

  virtual ~Conectar_Eliminar_args() throw();
  int32_t fila;
  int32_t columna;

  _Conectar_Eliminar_args__isset __isset;

  void __set_fila(const int32_t val);

  void __set_columna(const int32_t val);

  bool operator == (const Conectar_Eliminar_args & rhs) const
  {
    if (!(fila == rhs.fila))
      return false;
    if (!(columna == rhs.columna))
      return false;
    return true;
  }
  bool operator != (const Conectar_Eliminar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Eliminar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Conectar_Eliminar_pargs {
 public:


  virtual ~Conectar_Eliminar_pargs() throw();
  const int32_t* fila;
  const int32_t* columna;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Eliminar_result__isset {
  _Conectar_Eliminar_result__isset() : success(false) {}
  bool success :1;
} _Conectar_Eliminar_result__isset;

class Conectar_Eliminar_result {
 public:

  Conectar_Eliminar_result(const Conectar_Eliminar_result&);
  Conectar_Eliminar_result& operator=(const Conectar_Eliminar_result&);
  Conectar_Eliminar_result() : success(0) {
  }

  virtual ~Conectar_Eliminar_result() throw();
  int32_t success;

  _Conectar_Eliminar_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Conectar_Eliminar_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Conectar_Eliminar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Eliminar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Eliminar_presult__isset {
  _Conectar_Eliminar_presult__isset() : success(false) {}
  bool success :1;
} _Conectar_Eliminar_presult__isset;

class Conectar_Eliminar_presult {
 public:


  virtual ~Conectar_Eliminar_presult() throw();
  int32_t* success;

  _Conectar_Eliminar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Conectar_Pedir_DimesionT_args {
 public:

  Conectar_Pedir_DimesionT_args(const Conectar_Pedir_DimesionT_args&);
  Conectar_Pedir_DimesionT_args& operator=(const Conectar_Pedir_DimesionT_args&);
  Conectar_Pedir_DimesionT_args() {
  }

  virtual ~Conectar_Pedir_DimesionT_args() throw();

  bool operator == (const Conectar_Pedir_DimesionT_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Conectar_Pedir_DimesionT_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Pedir_DimesionT_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Conectar_Pedir_DimesionT_pargs {
 public:


  virtual ~Conectar_Pedir_DimesionT_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Pedir_DimesionT_result__isset {
  _Conectar_Pedir_DimesionT_result__isset() : success(false) {}
  bool success :1;
} _Conectar_Pedir_DimesionT_result__isset;

class Conectar_Pedir_DimesionT_result {
 public:

  Conectar_Pedir_DimesionT_result(const Conectar_Pedir_DimesionT_result&);
  Conectar_Pedir_DimesionT_result& operator=(const Conectar_Pedir_DimesionT_result&);
  Conectar_Pedir_DimesionT_result() : success(0) {
  }

  virtual ~Conectar_Pedir_DimesionT_result() throw();
  int32_t success;

  _Conectar_Pedir_DimesionT_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Conectar_Pedir_DimesionT_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Conectar_Pedir_DimesionT_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Pedir_DimesionT_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Pedir_DimesionT_presult__isset {
  _Conectar_Pedir_DimesionT_presult__isset() : success(false) {}
  bool success :1;
} _Conectar_Pedir_DimesionT_presult__isset;

class Conectar_Pedir_DimesionT_presult {
 public:


  virtual ~Conectar_Pedir_DimesionT_presult() throw();
  int32_t* success;

  _Conectar_Pedir_DimesionT_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Conectar_Agregar_Usuario_args__isset {
  _Conectar_Agregar_Usuario_args__isset() : usuario(false) {}
  bool usuario :1;
} _Conectar_Agregar_Usuario_args__isset;

class Conectar_Agregar_Usuario_args {
 public:

  Conectar_Agregar_Usuario_args(const Conectar_Agregar_Usuario_args&);
  Conectar_Agregar_Usuario_args& operator=(const Conectar_Agregar_Usuario_args&);
  Conectar_Agregar_Usuario_args() : usuario() {
  }

  virtual ~Conectar_Agregar_Usuario_args() throw();
  std::string usuario;

  _Conectar_Agregar_Usuario_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const Conectar_Agregar_Usuario_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const Conectar_Agregar_Usuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Agregar_Usuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Conectar_Agregar_Usuario_pargs {
 public:


  virtual ~Conectar_Agregar_Usuario_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Agregar_Usuario_result__isset {
  _Conectar_Agregar_Usuario_result__isset() : success(false) {}
  bool success :1;
} _Conectar_Agregar_Usuario_result__isset;

class Conectar_Agregar_Usuario_result {
 public:

  Conectar_Agregar_Usuario_result(const Conectar_Agregar_Usuario_result&);
  Conectar_Agregar_Usuario_result& operator=(const Conectar_Agregar_Usuario_result&);
  Conectar_Agregar_Usuario_result() : success(0) {
  }

  virtual ~Conectar_Agregar_Usuario_result() throw();
  int32_t success;

  _Conectar_Agregar_Usuario_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Conectar_Agregar_Usuario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Conectar_Agregar_Usuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Agregar_Usuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Agregar_Usuario_presult__isset {
  _Conectar_Agregar_Usuario_presult__isset() : success(false) {}
  bool success :1;
} _Conectar_Agregar_Usuario_presult__isset;

class Conectar_Agregar_Usuario_presult {
 public:


  virtual ~Conectar_Agregar_Usuario_presult() throw();
  int32_t* success;

  _Conectar_Agregar_Usuario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Conectar_Buscar_Usuario_args__isset {
  _Conectar_Buscar_Usuario_args__isset() : usuario(false) {}
  bool usuario :1;
} _Conectar_Buscar_Usuario_args__isset;

class Conectar_Buscar_Usuario_args {
 public:

  Conectar_Buscar_Usuario_args(const Conectar_Buscar_Usuario_args&);
  Conectar_Buscar_Usuario_args& operator=(const Conectar_Buscar_Usuario_args&);
  Conectar_Buscar_Usuario_args() : usuario() {
  }

  virtual ~Conectar_Buscar_Usuario_args() throw();
  std::string usuario;

  _Conectar_Buscar_Usuario_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const Conectar_Buscar_Usuario_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const Conectar_Buscar_Usuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Buscar_Usuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Conectar_Buscar_Usuario_pargs {
 public:


  virtual ~Conectar_Buscar_Usuario_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Buscar_Usuario_result__isset {
  _Conectar_Buscar_Usuario_result__isset() : success(false) {}
  bool success :1;
} _Conectar_Buscar_Usuario_result__isset;

class Conectar_Buscar_Usuario_result {
 public:

  Conectar_Buscar_Usuario_result(const Conectar_Buscar_Usuario_result&);
  Conectar_Buscar_Usuario_result& operator=(const Conectar_Buscar_Usuario_result&);
  Conectar_Buscar_Usuario_result() : success(0) {
  }

  virtual ~Conectar_Buscar_Usuario_result() throw();
  int32_t success;

  _Conectar_Buscar_Usuario_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Conectar_Buscar_Usuario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Conectar_Buscar_Usuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Buscar_Usuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Buscar_Usuario_presult__isset {
  _Conectar_Buscar_Usuario_presult__isset() : success(false) {}
  bool success :1;
} _Conectar_Buscar_Usuario_presult__isset;

class Conectar_Buscar_Usuario_presult {
 public:


  virtual ~Conectar_Buscar_Usuario_presult() throw();
  int32_t* success;

  _Conectar_Buscar_Usuario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Conectar_Cambio_Nivel_args__isset {
  _Conectar_Cambio_Nivel_args__isset() : usuario(false) {}
  bool usuario :1;
} _Conectar_Cambio_Nivel_args__isset;

class Conectar_Cambio_Nivel_args {
 public:

  Conectar_Cambio_Nivel_args(const Conectar_Cambio_Nivel_args&);
  Conectar_Cambio_Nivel_args& operator=(const Conectar_Cambio_Nivel_args&);
  Conectar_Cambio_Nivel_args() : usuario() {
  }

  virtual ~Conectar_Cambio_Nivel_args() throw();
  std::string usuario;

  _Conectar_Cambio_Nivel_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const Conectar_Cambio_Nivel_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const Conectar_Cambio_Nivel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Cambio_Nivel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Conectar_Cambio_Nivel_pargs {
 public:


  virtual ~Conectar_Cambio_Nivel_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Cambio_Nivel_result__isset {
  _Conectar_Cambio_Nivel_result__isset() : success(false) {}
  bool success :1;
} _Conectar_Cambio_Nivel_result__isset;

class Conectar_Cambio_Nivel_result {
 public:

  Conectar_Cambio_Nivel_result(const Conectar_Cambio_Nivel_result&);
  Conectar_Cambio_Nivel_result& operator=(const Conectar_Cambio_Nivel_result&);
  Conectar_Cambio_Nivel_result() : success(0) {
  }

  virtual ~Conectar_Cambio_Nivel_result() throw();
  int32_t success;

  _Conectar_Cambio_Nivel_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Conectar_Cambio_Nivel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Conectar_Cambio_Nivel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Cambio_Nivel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Cambio_Nivel_presult__isset {
  _Conectar_Cambio_Nivel_presult__isset() : success(false) {}
  bool success :1;
} _Conectar_Cambio_Nivel_presult__isset;

class Conectar_Cambio_Nivel_presult {
 public:


  virtual ~Conectar_Cambio_Nivel_presult() throw();
  int32_t* success;

  _Conectar_Cambio_Nivel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Conectar_ON_OFF_args__isset {
  _Conectar_ON_OFF_args__isset() : num(false) {}
  bool num :1;
} _Conectar_ON_OFF_args__isset;

class Conectar_ON_OFF_args {
 public:

  Conectar_ON_OFF_args(const Conectar_ON_OFF_args&);
  Conectar_ON_OFF_args& operator=(const Conectar_ON_OFF_args&);
  Conectar_ON_OFF_args() : num(0) {
  }

  virtual ~Conectar_ON_OFF_args() throw();
  int32_t num;

  _Conectar_ON_OFF_args__isset __isset;

  void __set_num(const int32_t val);

  bool operator == (const Conectar_ON_OFF_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const Conectar_ON_OFF_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_ON_OFF_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Conectar_ON_OFF_pargs {
 public:


  virtual ~Conectar_ON_OFF_pargs() throw();
  const int32_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_ON_OFF_result__isset {
  _Conectar_ON_OFF_result__isset() : success(false) {}
  bool success :1;
} _Conectar_ON_OFF_result__isset;

class Conectar_ON_OFF_result {
 public:

  Conectar_ON_OFF_result(const Conectar_ON_OFF_result&);
  Conectar_ON_OFF_result& operator=(const Conectar_ON_OFF_result&);
  Conectar_ON_OFF_result() : success(0) {
  }

  virtual ~Conectar_ON_OFF_result() throw();
  int32_t success;

  _Conectar_ON_OFF_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Conectar_ON_OFF_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Conectar_ON_OFF_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_ON_OFF_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_ON_OFF_presult__isset {
  _Conectar_ON_OFF_presult__isset() : success(false) {}
  bool success :1;
} _Conectar_ON_OFF_presult__isset;

class Conectar_ON_OFF_presult {
 public:


  virtual ~Conectar_ON_OFF_presult() throw();
  int32_t* success;

  _Conectar_ON_OFF_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Conectar_Puntajes_args__isset {
  _Conectar_Puntajes_args__isset() : usuario(false) {}
  bool usuario :1;
} _Conectar_Puntajes_args__isset;

class Conectar_Puntajes_args {
 public:

  Conectar_Puntajes_args(const Conectar_Puntajes_args&);
  Conectar_Puntajes_args& operator=(const Conectar_Puntajes_args&);
  Conectar_Puntajes_args() : usuario() {
  }

  virtual ~Conectar_Puntajes_args() throw();
  std::string usuario;

  _Conectar_Puntajes_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const Conectar_Puntajes_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const Conectar_Puntajes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Puntajes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Conectar_Puntajes_pargs {
 public:


  virtual ~Conectar_Puntajes_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Puntajes_result__isset {
  _Conectar_Puntajes_result__isset() : success(false) {}
  bool success :1;
} _Conectar_Puntajes_result__isset;

class Conectar_Puntajes_result {
 public:

  Conectar_Puntajes_result(const Conectar_Puntajes_result&);
  Conectar_Puntajes_result& operator=(const Conectar_Puntajes_result&);
  Conectar_Puntajes_result() : success() {
  }

  virtual ~Conectar_Puntajes_result() throw();
  std::string success;

  _Conectar_Puntajes_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Conectar_Puntajes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Conectar_Puntajes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Conectar_Puntajes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Conectar_Puntajes_presult__isset {
  _Conectar_Puntajes_presult__isset() : success(false) {}
  bool success :1;
} _Conectar_Puntajes_presult__isset;

class Conectar_Puntajes_presult {
 public:


  virtual ~Conectar_Puntajes_presult() throw();
  std::string* success;

  _Conectar_Puntajes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ConectarClient : virtual public ConectarIf {
 public:
  ConectarClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ConectarClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Eliminar(const int32_t fila, const int32_t columna);
  void send_Eliminar(const int32_t fila, const int32_t columna);
  int32_t recv_Eliminar();
  int32_t Pedir_DimesionT();
  void send_Pedir_DimesionT();
  int32_t recv_Pedir_DimesionT();
  int32_t Agregar_Usuario(const std::string& usuario);
  void send_Agregar_Usuario(const std::string& usuario);
  int32_t recv_Agregar_Usuario();
  int32_t Buscar_Usuario(const std::string& usuario);
  void send_Buscar_Usuario(const std::string& usuario);
  int32_t recv_Buscar_Usuario();
  int32_t Cambio_Nivel(const std::string& usuario);
  void send_Cambio_Nivel(const std::string& usuario);
  int32_t recv_Cambio_Nivel();
  int32_t ON_OFF(const int32_t num);
  void send_ON_OFF(const int32_t num);
  int32_t recv_ON_OFF();
  void Puntajes(std::string& _return, const std::string& usuario);
  void send_Puntajes(const std::string& usuario);
  void recv_Puntajes(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ConectarProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ConectarIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ConectarProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Eliminar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Pedir_DimesionT(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Agregar_Usuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Buscar_Usuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Cambio_Nivel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ON_OFF(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Puntajes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ConectarProcessor(::apache::thrift::stdcxx::shared_ptr<ConectarIf> iface) :
    iface_(iface) {
    processMap_["Eliminar"] = &ConectarProcessor::process_Eliminar;
    processMap_["Pedir_DimesionT"] = &ConectarProcessor::process_Pedir_DimesionT;
    processMap_["Agregar_Usuario"] = &ConectarProcessor::process_Agregar_Usuario;
    processMap_["Buscar_Usuario"] = &ConectarProcessor::process_Buscar_Usuario;
    processMap_["Cambio_Nivel"] = &ConectarProcessor::process_Cambio_Nivel;
    processMap_["ON_OFF"] = &ConectarProcessor::process_ON_OFF;
    processMap_["Puntajes"] = &ConectarProcessor::process_Puntajes;
  }

  virtual ~ConectarProcessor() {}
};

class ConectarProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ConectarProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ConectarIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ConectarIfFactory > handlerFactory_;
};

class ConectarMultiface : virtual public ConectarIf {
 public:
  ConectarMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ConectarIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ConectarMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ConectarIf> > ifaces_;
  ConectarMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ConectarIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Eliminar(const int32_t fila, const int32_t columna) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Eliminar(fila, columna);
    }
    return ifaces_[i]->Eliminar(fila, columna);
  }

  int32_t Pedir_DimesionT() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Pedir_DimesionT();
    }
    return ifaces_[i]->Pedir_DimesionT();
  }

  int32_t Agregar_Usuario(const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Agregar_Usuario(usuario);
    }
    return ifaces_[i]->Agregar_Usuario(usuario);
  }

  int32_t Buscar_Usuario(const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Buscar_Usuario(usuario);
    }
    return ifaces_[i]->Buscar_Usuario(usuario);
  }

  int32_t Cambio_Nivel(const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Cambio_Nivel(usuario);
    }
    return ifaces_[i]->Cambio_Nivel(usuario);
  }

  int32_t ON_OFF(const int32_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ON_OFF(num);
    }
    return ifaces_[i]->ON_OFF(num);
  }

  void Puntajes(std::string& _return, const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Puntajes(_return, usuario);
    }
    ifaces_[i]->Puntajes(_return, usuario);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ConectarConcurrentClient : virtual public ConectarIf {
 public:
  ConectarConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ConectarConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Eliminar(const int32_t fila, const int32_t columna);
  int32_t send_Eliminar(const int32_t fila, const int32_t columna);
  int32_t recv_Eliminar(const int32_t seqid);
  int32_t Pedir_DimesionT();
  int32_t send_Pedir_DimesionT();
  int32_t recv_Pedir_DimesionT(const int32_t seqid);
  int32_t Agregar_Usuario(const std::string& usuario);
  int32_t send_Agregar_Usuario(const std::string& usuario);
  int32_t recv_Agregar_Usuario(const int32_t seqid);
  int32_t Buscar_Usuario(const std::string& usuario);
  int32_t send_Buscar_Usuario(const std::string& usuario);
  int32_t recv_Buscar_Usuario(const int32_t seqid);
  int32_t Cambio_Nivel(const std::string& usuario);
  int32_t send_Cambio_Nivel(const std::string& usuario);
  int32_t recv_Cambio_Nivel(const int32_t seqid);
  int32_t ON_OFF(const int32_t num);
  int32_t send_ON_OFF(const int32_t num);
  int32_t recv_ON_OFF(const int32_t seqid);
  void Puntajes(std::string& _return, const std::string& usuario);
  int32_t send_Puntajes(const std::string& usuario);
  void recv_Puntajes(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
