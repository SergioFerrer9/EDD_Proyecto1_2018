// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

/*
#include "Conectar.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::proyecto1;

class ConectarHandler : virtual public ConectarIf {
 public:
  ConectarHandler() {
    // Your initialization goes here
  }

  int32_t Eliminar(const int32_t fila, const int32_t columna) {
    // Your implementation goes here
    printf("Eliminar\n");
  }

  int32_t Pedir_DimesionT() {
    // Your implementation goes here
    printf("Pedir_DimesionT\n");
  }

  int32_t Agregar_Usuario(const std::string& usuario) {
    // Your implementation goes here
    printf("Agregar_Usuario\n");
  }

  int32_t Buscar_Usuario(const std::string& usuario) {
    // Your implementation goes here
    printf("Buscar_Usuario\n");
  }

  int32_t Cambio_Nivel(const std::string& usuario) {
    // Your implementation goes here
    printf("Cambio_Nivel\n");
  }

  int32_t ON_OFF(const int32_t num) {
    // Your implementation goes here
    printf("ON_OFF\n");
  }

  void Puntajes(std::string& _return, const std::string& usuario) {
    // Your implementation goes here
    printf("Puntajes\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<ConectarHandler> handler(new ConectarHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ConectarProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

*/
